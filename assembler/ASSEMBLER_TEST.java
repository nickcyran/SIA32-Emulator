package assembler;

import java.util.HashMap;

import org.junit.Before;
import org.junit.Assert;
import org.junit.Test;


public class ASSEMBLER_TEST {
	
	public void TEST(String asm, String bin) {	
		Parser p = new Parser(new Lexer(asm).lex());
		String asmAsBin = p.parse().getFirst();
		
		Assert.assertEquals(bin, asmAsBin);
	}
	
	@Test
	public void testAssembler() {
		//-[000]-------------------------------------------------------------------------
		TEST("MATH ADD R1 R2", "0000000000000" + "00001" + "1110" + "00010" + "00010");
		TEST("MATH SUB R1 R2 R3", "00000000" + "00001" + "00010" + "1111" + "00011" + "00011");
		TEST("MATH MULT R6 R12", "0000000000000" + "00110" + "0111" + "01100" + "00010");
		
		TEST("COPY R2 3", "000000000000000011" + "0000" + "00010" + "00001");
		
		TEST("HALT", "00000000000000000000000000000000");
		
		//-[001]-------------------------------------------------------------------------
		TEST("BRANCH EQ R1 R2 3", "0000000000011" + "00001" + "0000" + "00010" + "00110");
		TEST("BRANCH NEQ R1 R2 4", "0000000000100" + "00001" + "0001" + "00010" + "00110");
		TEST("BRANCH GE R1 R2 4", "0000000000100" + "00001" + "0011" + "00010" + "00110");
		
		TEST("JUMPBY 10", "000000000000000000000001010" + "00101");
		
		TEST("JUMPTO 10", "000000000000000000000001010" + "00100");
		
		//-[010]-------------------------------------------------------------------------
		TEST("CALL LT R1 R2 R4 7", "00000111" + "00001" + "00010" + "0010" + "00100" + "01011");
		TEST("CALL GT R1 R3 3", "0000000000011" + "00001" + "0100" + "00011" + "01010");
		TEST("CALL R8 2", "000000000000000010" + "0000" + "01000" + "01001");
		TEST("CALL 8", "000000000000000000000001000" + "01000");
		
		//-[011]-------------------------------------------------------------------------
		TEST("PUSH ADD R3 R1", "0000000000000" + "00011" + "1110" + "00001" + "01110");
		TEST("PUSH AND R1 5", "000000000000000101" + "1000" +"00001" + "01101");
		
		//-[100]-------------------------------------------------------------------------
		TEST("LOAD R1 R2 R3", "00000000" + "00001" + "00010" + "0000" + "00011" + "10011");
		TEST("LOAD R3 R4 1", "0000000000001" + "00011" + "0000" + "00100" + "10010");
		TEST("LOAD R7 12", "000000000000001100" + "0000" + "00111" + "10001");
		
		TEST("RETURN", "000000000000000000000000000" + "10000");
		
		//-[101]-------------------------------------------------------------------------
		TEST("STORE R1 R2 R3", "00000000" + "00001" + "00010" + "0000" + "00011" + "10111");
		TEST("STORE R2 R3 7", "0000000000111" + "00010" + "0000" + "00011" + "10110");
		TEST("STORE R4 13", "000000000000001101" + "0000" + "00100" + "10101");
		
		//-[110]-------------------------------------------------------------------------
		TEST("PEEK R1 R2 R3", "00000000" + "00001" + "00010" + "0000" + "00011" + "11011" );
		TEST("PEEK R1 R3 6", "0000000000110" + "00001" + "0000" + "00011" + "11010");
		
		TEST("POP R2", "000000000000000000" + "0000" + "00010" + "11001");
	}
}
